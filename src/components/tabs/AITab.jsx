import { useState } from 'react';
import { useSupabaseQuery } from '../../hooks/useSupabase';
import toast from 'react-hot-toast';

export default function AITab({ onNavigate }) { // eslint-disable-line no-unused-vars
  const [selectedAnalysis, setSelectedAnalysis] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [selectedTeam, setSelectedTeam] = useState('AEK');

  // Fetch data for AI analysis
  const { data: players } = useSupabaseQuery('players', '*');
  const { data: matches } = useSupabaseQuery('matches', '*', { order: { column: 'date', ascending: false } });
  const { data: transactions } = useSupabaseQuery('transactions', '*');

  const aiFeatures = [
    {
      id: 'team-performance',
      icon: 'üìä',
      title: 'Team-Performance Analyse',
      description: 'KI-basierte Analyse der Team-Leistung √ºber Zeit',
      action: () => analyzeTeamPerformance()
    },
    {
      id: 'player-valuation',
      icon: 'üí∞',
      title: 'Spieler-Bewertung',
      description: 'KI bewertet Spieler basierend auf Performance und Marktwert',
      action: () => analyzePlayerValuation()
    },
    {
      id: 'transfer-predictor',
      icon: 'üîÆ',
      title: 'Transfer Vorhersagen',
      description: 'Voraussage von zuk√ºnftigen Transfers basierend auf Trends',
      action: () => predictTransfers()
    },
    {
      id: 'formation-optimizer',
      icon: '‚öΩ',
      title: 'Aufstellungs-Optimierer',
      description: 'Optimale Aufstellung basierend auf Spieler-St√§rken',
      action: () => optimizeFormation()
    },
    {
      id: 'injury-predictor',
      icon: 'üè•',
      title: 'Verletzungsrisiko',
      description: 'Analyse des Verletzungsrisikos von Spielern',
      action: () => analyzeInjuryRisk()
    },
    {
      id: 'financial-forecast',
      icon: 'üìà',
      title: 'Finanz-Prognose',
      description: 'Vorhersage der finanziellen Entwicklung',
      action: () => forecastFinances()
    }
  ];

  const analyzeTeamPerformance = async () => {
    setIsAnalyzing(true);
    try {
      // Simulate AI analysis
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      if (!matches || matches.length === 0) {
        toast.error('Nicht gen√ºgend Spieldaten f√ºr Analyse');
        return;
      }

      const recentMatches = matches.slice(0, 10);
      const aekWins = recentMatches.filter(m => (m.goalsa || 0) > (m.goalsb || 0)).length;
      const realWins = recentMatches.filter(m => (m.goalsb || 0) > (m.goalsa || 0)).length;
      const draws = recentMatches.length - aekWins - realWins;

      // Team-specific goals and performance
      const teamGoals = selectedTeam === 'AEK' 
        ? recentMatches.reduce((sum, m) => sum + (m.goalsa || 0), 0)
        : recentMatches.reduce((sum, m) => sum + (m.goalsb || 0), 0);
      
      const opponentGoals = selectedTeam === 'AEK'
        ? recentMatches.reduce((sum, m) => sum + (m.goalsb || 0), 0)
        : recentMatches.reduce((sum, m) => sum + (m.goalsa || 0), 0);

      const teamWins = selectedTeam === 'AEK' ? aekWins : realWins;
      const teamWinRate = ((teamWins / recentMatches.length) * 100).toFixed(1);

      const analysis = {
        title: `ü§ñ KI Team-Performance Analyse f√ºr ${selectedTeam === 'AEK' ? 'AEK Athen' : 'Real Madrid'}`,
        data: `
üìä Analyse der letzten ${recentMatches.length} Spiele f√ºr ${selectedTeam === 'AEK' ? 'AEK Athen' : 'Real Madrid'}:

üéØ ${selectedTeam} Performance:
‚Ä¢ Siege: ${teamWins} (${teamWinRate}%)
‚Ä¢ Erzielte Tore: ${teamGoals} (‚åÄ ${(teamGoals/recentMatches.length).toFixed(1)} pro Spiel)
‚Ä¢ Gegentore: ${opponentGoals} (‚åÄ ${(opponentGoals/recentMatches.length).toFixed(1)} pro Spiel)
‚Ä¢ Tor-Differenz: ${teamGoals > opponentGoals ? '+' : ''}${teamGoals - opponentGoals}

üìà Form-Trend:
${teamWins > (recentMatches.length - teamWins - draws) ? 'Steigend üìà - Starke Phase!' : 
  teamWins === (recentMatches.length - teamWins - draws) ? 'Stabil ‚ÜîÔ∏è - Ausgeglichene Leistung' : 
  'Fallend üìâ - Verbesserung n√∂tig'}

üéØ KI-Empfehlung f√ºr ${selectedTeam}:
${teamWinRate >= 70 ? `Exzellente Form! ${selectedTeam} sollte die Taktik beibehalten und Erfolg stabilisieren.` :
  teamWinRate >= 50 ? `Solide Leistung. ${selectedTeam} kann mit kleinen Anpassungen noch besser werden.` :
  `Schw√§chephase. ${selectedTeam} sollte Taktik √ºberdenken und Spieler motivieren.`}

üí° Taktische Empfehlungen:
‚Ä¢ ${teamGoals < opponentGoals ? 'Offensive verst√§rken - mehr Kreativit√§t im Angriff' : 'Defensive stabilisieren - weniger Gegentore zulassen'}
‚Ä¢ ${teamWinRate < 50 ? 'Mentaltraining f√ºr mehr Siegeswillen' : 'Konstanz halten und Erfolg ausbauen'}
‚Ä¢ Spielerrotation ${teamWinRate > 60 ? 'beibehalten' : '√ºberdenken'}
        `
      };

      setSelectedAnalysis(analysis);
      toast.success('ü§ñ KI-Analyse abgeschlossen!');
    } catch (error) {
      toast.error('Fehler bei der KI-Analyse');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzePlayerValuation = async () => {
    setIsAnalyzing(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      if (!players || players.length === 0) {
        toast.error('Keine Spielerdaten f√ºr Analyse verf√ºgbar');
        return;
      }

      // Filter players by selected team
      const teamPlayers = players.filter(p => p.team === selectedTeam);
      const otherTeamPlayers = players.filter(p => p.team !== selectedTeam && p.team !== 'Ehemalige');
      
      if (teamPlayers.length === 0) {
        toast.error(`Keine Spielerdaten f√ºr ${selectedTeam} verf√ºgbar`);
        return;
      }

      const sortedTeamPlayers = [...teamPlayers].sort((a, b) => (b.value || 0) - (a.value || 0));
      const topPlayer = sortedTeamPlayers[0];
      const avgTeamValue = teamPlayers.reduce((sum, p) => sum + (p.value || 0), 0) / teamPlayers.length;
      const totalTeamValue = teamPlayers.reduce((sum, p) => sum + (p.value || 0), 0);
      
      // Compare with other team
      const otherTeamValue = otherTeamPlayers.reduce((sum, p) => sum + (p.value || 0), 0);
      const otherTeamName = selectedTeam === 'AEK' ? 'Real Madrid' : 'AEK Athen';

      const undervalued = teamPlayers.filter(p => (p.value || 0) < avgTeamValue * 0.7);
      const overvalued = teamPlayers.filter(p => (p.value || 0) > avgTeamValue * 1.5);

      const analysis = {
        title: `ü§ñ KI Spieler-Bewertung f√ºr ${selectedTeam === 'AEK' ? 'AEK Athen' : 'Real Madrid'}`,
        data: `
üíé Top-Spieler: ${topPlayer.name} (${topPlayer.value || 0}M ‚Ç¨)
üìä Durchschnittswert: ${avgTeamValue.toFixed(1)}M ‚Ç¨
üí∞ Gesamtwert Kader: ${totalTeamValue.toFixed(1)}M ‚Ç¨
üë• Spieler im Team: ${teamPlayers.length}

‚öñÔ∏è Vergleich mit ${otherTeamName}:
‚Ä¢ ${selectedTeam} Kaderwert: ${totalTeamValue.toFixed(1)}M ‚Ç¨
‚Ä¢ ${otherTeamName} Kaderwert: ${otherTeamValue.toFixed(1)}M ‚Ç¨
‚Ä¢ Differenz: ${totalTeamValue > otherTeamValue ? '+' : ''}${(totalTeamValue - otherTeamValue).toFixed(1)}M ‚Ç¨

üîç Unterbewertete Talente (< ${(avgTeamValue * 0.7).toFixed(1)}M ‚Ç¨):
${undervalued.length > 0 
  ? undervalued.slice(0, 3).map(p => `‚Ä¢ ${p.name} - ${p.value || 0}M ‚Ç¨ (${p.position || 'Unbekannt'})`).join('\n')
  : '‚Ä¢ Keine unterbewerteten Spieler gefunden'}

üí∏ √úberbewertete Spieler (> ${(avgTeamValue * 1.5).toFixed(1)}M ‚Ç¨):
${overvalued.length > 0 
  ? overvalued.slice(0, 2).map(p => `‚Ä¢ ${p.name} - ${p.value || 0}M ‚Ç¨ (Verkaufskandidat?)`).join('\n')
  : '‚Ä¢ Keine √ºberbewerteten Spieler'}

üéØ KI-Empfehlung f√ºr ${selectedTeam}:
${totalTeamValue > otherTeamValue 
  ? `Starker Kader! Fokus auf Qualit√§t und taktische Entwicklung.`
  : `Investition n√∂tig. Unterbewertete Talente f√∂rdern oder neue Spieler verpflichten.`}

üí° Transferstrategie:
‚Ä¢ ${undervalued.length > 0 ? `Talente wie ${undervalued[0].name} f√∂rdern` : 'Keine internen Talente - externe Verst√§rkung suchen'}
‚Ä¢ ${overvalued.length > 0 ? `Verkauf von ${overvalued[0].name} erw√§gen f√ºr Budget` : 'Kader gut ausbalanciert'}
        `
      };

      setSelectedAnalysis(analysis);
      toast.success('ü§ñ Spieler-Analyse abgeschlossen!');
    } catch (error) {
      toast.error('Fehler bei der Spieler-Analyse');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const predictTransfers = async () => {
    setIsAnalyzing(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 2500));
      
      if (!players || players.length === 0) {
        toast.error('Keine Spielerdaten f√ºr Transfer-Analyse verf√ºgbar');
        return;
      }

      // Analyze current team compositions
      const aekPlayers = players.filter(p => p.team === 'AEK');
      const realPlayers = players.filter(p => p.team === 'Real');
      const currentPositions = [...aekPlayers, ...realPlayers].reduce((acc, player) => {
        acc[player.position] = (acc[player.position] || 0) + 1;
        return acc;
      }, {});

      // Simulate realistic Transfermarkt.de player suggestions
      const transfermarktSuggestions = [
        {
          name: 'Pedri Gonz√°lez',
          position: 'ZOM',
          age: 21,
          marketValue: 80.0,
          eafc25Rating: 85,
          club: 'FC Barcelona',
          nationality: 'Spanien',
          reason: 'Junges Talent mit enormem Potenzial',
          pros: ['Kreative P√§sse', 'Technisch versiert', 'Ballsicher'],
          cons: ['Noch jung', 'Hoher Preis'],
          fitScore: 92
        },
        {
          name: 'Jamal Musiala',
          position: 'LF',
          age: 21,
          marketValue: 100.0,
          eafc25Rating: 84,
          club: 'FC Bayern M√ºnchen',
          nationality: 'Deutschland',
          reason: 'Perfekt f√ºr flexibles Offensivspiel',
          pros: ['Dribbling-K√ºnstler', 'Vielseitig', 'Torgef√§hrlich'],
          cons: ['Sehr teuer', 'Hohe Konkurrenz'],
          fitScore: 89
        },
        {
          name: 'Eduardo Camavinga',
          position: 'ZDM',
          age: 22,
          marketValue: 90.0,
          eafc25Rating: 83,
          club: 'Real Madrid',
          nationality: 'Frankreich',
          reason: 'Stabilit√§t im defensiven Mittelfeld',
          pros: ['Defensive St√§rke', 'Passspiel', 'Jung'],
          cons: ['Teuer', 'K√∂nnte zu Real passen'],
          fitScore: 87
        },
        {
          name: 'Florian Wirtz',
          position: 'ZOM',
          age: 21,
          marketValue: 85.0,
          eafc25Rating: 82,
          club: 'Bayer Leverkusen',
          nationality: 'Deutschland',
          reason: 'Deutscher Spielmacher der Zukunft',
          pros: ['Kreativit√§t', 'Tore + Assists', 'Bundesliga-erprobt'],
          cons: ['Verletzungshistorie', 'Hohe Erwartungen'],
          fitScore: 91
        },
        {
          name: 'Arda G√ºler',
          position: 'RV',
          age: 19,
          marketValue: 25.0,
          eafc25Rating: 77,
          club: 'Real Madrid',
          nationality: 'T√ºrkei',
          reason: 'G√ºnstiges Talent mit Potenzial',
          pros: ['G√ºnstig', 'Hohes Potenzial', 'Junge Jahre'],
          cons: ['Unerfahren', 'Entwicklung unsicher'],
          fitScore: 78
        }
      ];

      // Filter suggestions based on team needs
      const positionNeeds = Object.keys(currentPositions).length < 5 ? ['ZOM', 'ST', 'IV'] : 
                           currentPositions['ST'] < 2 ? ['ST', 'LF', 'RF'] :
                           currentPositions['IV'] < 2 ? ['IV', 'LV', 'RV'] : ['ZM', 'ZOM'];
      
      const relevantSuggestions = transfermarktSuggestions
        .filter(player => positionNeeds.includes(player.position))
        .sort((a, b) => b.fitScore - a.fitScore)
        .slice(0, 3);

      const budgetAnalysis = players.reduce((sum, p) => sum + (p.value || 0), 0) / players.length;

      const analysis = {
        title: 'üîÆ KI Transfer-Vorhersagen (Transfermarkt.de)',
        data: `
üåê TRANSFERMARKT.DE EMPFEHLUNGEN

üìä Team-Analyse:
‚Ä¢ AEK Spieler: ${aekPlayers.length}
‚Ä¢ Real Spieler: ${realPlayers.length}
‚Ä¢ √ò Marktwert: ${budgetAnalysis.toFixed(1)}M ‚Ç¨
‚Ä¢ Schw√§chste Positionen: ${positionNeeds.join(', ')}

üéØ TOP TRANSFER-EMPFEHLUNGEN:

${relevantSuggestions.map((player, index) => `
${index + 1}. ${player.name} (${player.age} Jahre)
   üèÉ Position: ${player.position}
   üí∞ Marktwert: ${player.marketValue}M ‚Ç¨
   üéÆ EA FC 25: ${player.eafc25Rating}/100
   üèÜ Verein: ${player.club}
   üåç Nation: ${player.nationality}
   
   ‚úÖ St√§rken: ${player.pros.join(', ')}
   ‚ö†Ô∏è Schw√§chen: ${player.cons.join(', ')}
   üéØ Team-Fit: ${player.fitScore}%
   
   üí° Grund: ${player.reason}
`).join('\n')}

üíº MARKT-TRENDS:
‚Ä¢ Offensive Mittelfeldspieler +15% Wert
‚Ä¢ Junge Verteidiger sehr gefragt
‚Ä¢ Bundesliga-Talente haben Preisaufschlag
‚Ä¢ Premier League-Spieler √ºberteuert

üîç ALTERNATIVE M√ÑRKTE:
‚Ä¢ Eredivisie: G√ºnstige Talente
‚Ä¢ Liga Portugal: Technische Spieler
‚Ä¢ Serie A: Taktisch versierte Profis

üìà VERKAUFS-EMPFEHLUNGEN:
${players.filter(p => (p.value || 0) > budgetAnalysis * 1.5).slice(0, 2).map(p => `‚Ä¢ ${p.name} (${p.value}M ‚Ç¨) - √úberdurchschnittlich wertvoll`).join('\n')}

üéØ BUDGET-EMPFEHLUNG:
Verf√ºgbares Budget: ~${(budgetAnalysis * players.length * 0.3).toFixed(0)}M ‚Ç¨
Idealer Neuzugang: ${relevantSuggestions[0]?.name || 'Siehe Empfehlungen'}
        `
      };

      setSelectedAnalysis(analysis);
      toast.success('üåê Transfermarkt.de Analyse abgeschlossen!');
    } catch (error) {
      toast.error('Fehler bei der Transfer-Vorhersage');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const optimizeFormation = async () => {
    setIsAnalyzing(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 2200));
      
      // Get team-specific players
      const teamPlayers = players?.filter(p => p.team === selectedTeam) || [];
      
      if (teamPlayers.length === 0) {
        toast.error(`Keine Spieler f√ºr ${selectedTeam} verf√ºgbar`);
        return;
      }

      // Analyze available positions
      const positionCount = teamPlayers.reduce((acc, player) => {
        acc[player.position] = (acc[player.position] || 0) + 1;
        return acc;
      }, {});

      // Determine best formation based on available players
      const hasEnoughDefenders = (positionCount['IV'] || 0) >= 2 && (positionCount['LV'] || 0) >= 1 && (positionCount['RV'] || 0) >= 1;
      const hasStrongMidfield = (positionCount['ZM'] || 0) >= 2;
      const hasMultipleStrikers = (positionCount['ST'] || 0) >= 2;

      let recommendedFormation = '4-3-3';
      let formationReason = 'Ausgewogene Formation';
      
      if (hasMultipleStrikers && hasEnoughDefenders) {
        recommendedFormation = '4-4-2';
        formationReason = 'Nutzt verf√ºgbare St√ºrmer optimal';
      } else if (!hasStrongMidfield) {
        recommendedFormation = '3-5-2';
        formationReason = 'Verst√§rkt schwaches Mittelfeld';
      }

      // Find best players for key positions
      const topGoalkeeper = teamPlayers.filter(p => p.position === 'TH').sort((a, b) => (b.value || 0) - (a.value || 0))[0];
      const topMidfielder = teamPlayers.filter(p => p.position === 'ZM' || p.position === 'ZOM').sort((a, b) => (b.value || 0) - (a.value || 0))[0];
      const topStriker = teamPlayers.filter(p => p.position === 'ST' || p.position === 'LF' || p.position === 'RF').sort((a, b) => (b.value || 0) - (a.value || 0))[0];

      const analysis = {
        title: `‚öΩ KI Aufstellungs-Optimierer f√ºr ${selectedTeam === 'AEK' ? 'AEK Athen' : 'Real Madrid'}`,
        data: `
ü§ñ Optimale Formation f√ºr ${selectedTeam} basierend auf ${teamPlayers.length} verf√ºgbaren Spielern:

üèÜ Empfohlene Formation: ${recommendedFormation}
üìù Grund: ${formationReason}

üìä Kader-Analyse:
‚Ä¢ Torh√ºter: ${positionCount['TH'] || 0}
‚Ä¢ Verteidiger: ${(positionCount['IV'] || 0) + (positionCount['LV'] || 0) + (positionCount['RV'] || 0)}
‚Ä¢ Mittelfeld: ${(positionCount['ZM'] || 0) + (positionCount['ZDM'] || 0) + (positionCount['ZOM'] || 0)}
‚Ä¢ Angriff: ${(positionCount['ST'] || 0) + (positionCount['LF'] || 0) + (positionCount['RF'] || 0)}

‚≠ê Schl√ºsselspieler:
${topGoalkeeper ? `‚Ä¢ Tor: ${topGoalkeeper.name} (${topGoalkeeper.value || 0}M ‚Ç¨)` : '‚Ä¢ Tor: Kein Torh√ºter verf√ºgbar'}
${topMidfielder ? `‚Ä¢ Mittelfeld: ${topMidfielder.name} (${topMidfielder.value || 0}M ‚Ç¨)` : '‚Ä¢ Mittelfeld: Kein Mittelfeldspieler verf√ºgbar'}
${topStriker ? `‚Ä¢ Angriff: ${topStriker.name} (${topStriker.value || 0}M ‚Ç¨)` : '‚Ä¢ Angriff: Kein Angreifer verf√ºgbar'}

üí° KI-Tipps f√ºr ${selectedTeam}:
‚Ä¢ ${topMidfielder ? `${topMidfielder.name} als Spielmacher einsetzen` : 'Kreativen Mittelfeldspieler verpflichten'}
‚Ä¢ ${hasEnoughDefenders ? 'Defensive ist gut besetzt' : 'Verteidigung verst√§rken'}
‚Ä¢ ${positionCount['ST'] >= 2 ? 'Sturm-Rotation nutzen' : 'Angriff durch Fl√ºgelspieler verst√§rken'}

‚ö° Alternative Formationen:
‚Ä¢ ${recommendedFormation !== '4-3-3' ? '4-3-3: Mehr Offensive' : '4-4-2: Mehr Defensive'}
‚Ä¢ ${recommendedFormation !== '3-5-2' ? '3-5-2: Mittelfeld-Dominanz' : '4-5-1: Defensive Stabilit√§t'}
        `
      };

      setSelectedAnalysis(analysis);
      toast.success(`‚öΩ Formation f√ºr ${selectedTeam} optimiert!`);
    } catch (error) {
      toast.error('Fehler bei der Formations-Optimierung');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeInjuryRisk = async () => {
    setIsAnalyzing(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1600));
      
      const analysis = {
        title: 'üè• KI Verletzungsrisiko-Analyse',
        data: `
ü§ñ Verletzungsrisiko-Bewertung:

‚ö†Ô∏è Risiko-Faktoren:
‚Ä¢ Intensit√§t der Spiele: Hoch
‚Ä¢ Spieler-Rotation: Mittel
‚Ä¢ Belastungsmanagement: Verbesserungsbedarf

üìä Risiko-Kategorien:
üî¥ Hoch-Risiko: Stammspieler (> 80% Einsatzzeit)
üü° Mittel-Risiko: Rotationsspieler
üü¢ Niedrig-Risiko: Ersatzspieler

üéØ Pr√§ventions-Empfehlungen:
‚Ä¢ Mehr Rotation bei Stammspielern
‚Ä¢ Regenerationspausen einhalten
‚Ä¢ Fitness-Monitoring verst√§rken
‚Ä¢ Aufw√§rmroutinen optimieren

üíä Vorsorgema√ünahmen:
‚Ä¢ Physiotherapie nach intensiven Spielen
‚Ä¢ Ern√§hrungsoptimierung
‚Ä¢ Schlafqualit√§t verbessern
        `
      };

      setSelectedAnalysis(analysis);
      toast.success('üè• Verletzungsrisiko analysiert!');
    } catch (error) {
      toast.error('Fehler bei der Risiko-Analyse');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const forecastFinances = async () => {
    setIsAnalyzing(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1900));
      
      if (!transactions) {
        toast.error('Keine Finanzdaten f√ºr Prognose verf√ºgbar');
        return;
      }

      const totalIncome = transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
      const totalExpenses = transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
      const netResult = totalIncome - totalExpenses;

      const analysis = {
        title: 'üìà KI Finanz-Prognose',
        data: `
ü§ñ Finanzielle Zukunftsanalyse:

üí∞ Aktuelle Bilanz:
‚Ä¢ Einnahmen: ${totalIncome.toFixed(1)}M ‚Ç¨
‚Ä¢ Ausgaben: ${totalExpenses.toFixed(1)}M ‚Ç¨
‚Ä¢ Saldo: ${netResult.toFixed(1)}M ‚Ç¨ ${netResult >= 0 ? '‚úÖ' : '‚ö†Ô∏è'}

üìä 6-Monats-Prognose:
‚Ä¢ Erwartete Einnahmen: ${(totalIncome * 1.2).toFixed(1)}M ‚Ç¨
‚Ä¢ Gesch√§tzte Ausgaben: ${(totalExpenses * 1.15).toFixed(1)}M ‚Ç¨
‚Ä¢ Voraussichtlicher Saldo: ${(netResult * 1.1).toFixed(1)}M ‚Ç¨

üéØ KI-Empfehlungen:
${netResult >= 0 ? 
  '‚Ä¢ Stabile Finanzlage - Investitionen m√∂glich\n‚Ä¢ Transferbudget: ~' + (netResult * 0.7).toFixed(1) + 'M ‚Ç¨' :
  '‚Ä¢ Ausgaben reduzieren\n‚Ä¢ Transferverk√§ufe erw√§gen\n‚Ä¢ Kostenoptimierung n√∂tig'}

üîÆ Langzeit-Trend: ${netResult >= 0 ? 'Positiv üìà' : 'Kritisch üìâ'}
        `
      };

      setSelectedAnalysis(analysis);
      toast.success('üìà Finanz-Prognose erstellt!');
    } catch (error) {
      toast.error('Fehler bei der Finanz-Prognose');
    } finally {
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="p-4 pb-24 mobile-safe-bottom">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-text-primary mb-2 flex items-center">
          <span className="mr-3">ü§ñ</span>
          KI-Assistent
        </h2>
        <p className="text-text-muted">
          Intelligente Analysen und Vorhersagen f√ºr dein Team
        </p>
      </div>

      {/* Team Selection */}
      <div className="mb-6 modern-card">
        <h3 className="font-semibold text-text-primary mb-3 flex items-center">
          <span className="mr-2">üéØ</span>
          Team f√ºr KI-Analyse ausw√§hlen
        </h3>
        <div className="flex gap-3">
          <button
            onClick={() => setSelectedTeam('AEK')}
            className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
              selectedTeam === 'AEK'
                ? 'bg-blue-500 text-white shadow-md'
                : 'bg-bg-secondary text-text-primary hover:bg-blue-100 border border-border-light'
            }`}
          >
            <span className="text-lg">üîµ</span>
            AEK Athen
          </button>
          <button
            onClick={() => setSelectedTeam('Real')}
            className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
              selectedTeam === 'Real'
                ? 'bg-red-500 text-white shadow-md'
                : 'bg-bg-secondary text-text-primary hover:bg-red-100 border border-border-light'
            }`}
          >
            <span className="text-lg">üî¥</span>
            Real Madrid
          </button>
        </div>
        <p className="text-sm text-text-muted mt-2">
          Die KI-Analysen werden speziell f√ºr das ausgew√§hlte Team angepasst.
        </p>
      </div>

      {/* AI Features Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        {aiFeatures.map((feature) => (
          <button
            key={feature.id}
            onClick={feature.action}
            disabled={isAnalyzing}
            className="p-4 bg-bg-secondary border border-border-light rounded-lg hover:bg-bg-tertiary hover:border-primary-green transition-all duration-200 text-left disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <div className="flex items-start gap-3">
              <span className="text-2xl" aria-hidden="true">{feature.icon}</span>
              <div className="flex-1">
                <h3 className="font-semibold text-text-primary mb-1">{feature.title}</h3>
                <p className="text-sm text-text-secondary">{feature.description}</p>
              </div>
            </div>
          </button>
        ))}
      </div>

      {/* Loading State */}
      {isAnalyzing && (
        <div className="bg-primary-green bg-opacity-10 border border-primary-green rounded-lg p-4 mb-6">
          <div className="flex items-center gap-3">
            <div className="animate-spin w-6 h-6 border-2 border-primary-green border-t-transparent rounded-full"></div>
            <div>
              <h3 className="font-semibold text-primary-green">ü§ñ KI analysiert...</h3>
              <p className="text-sm text-text-secondary">Bitte warten Sie, w√§hrend die KI die Daten verarbeitet.</p>
            </div>
          </div>
        </div>
      )}

      {/* Analysis Results */}
      {selectedAnalysis && (
        <div className="bg-bg-secondary border border-border-light rounded-lg p-6">
          <div className="flex justify-between items-start mb-4">
            <h3 className="text-lg font-bold text-text-primary">{selectedAnalysis.title}</h3>
            <button
              onClick={() => setSelectedAnalysis(null)}
              className="text-text-secondary hover:text-text-primary transition-colors"
            >
              ‚úï
            </button>
          </div>
          <pre className="whitespace-pre-wrap text-sm text-text-primary font-mono bg-bg-primary p-4 rounded border border-border-light overflow-x-auto">
            {selectedAnalysis.data}
          </pre>
          <div className="mt-4 flex gap-2">
            <button
              onClick={() => {
                navigator.clipboard.writeText(selectedAnalysis.data);
                toast.success('Analyse in Zwischenablage kopiert!');
              }}
              className="px-3 py-1 bg-primary-green text-white rounded text-sm hover:bg-green-600 transition-colors"
            >
              üìã Kopieren
            </button>
            <button
              onClick={() => setSelectedAnalysis(null)}
              className="px-3 py-1 bg-bg-tertiary border border-border-light rounded text-sm hover:bg-bg-primary transition-colors"
            >
              Schlie√üen
            </button>
          </div>
        </div>
      )}

      {/* AI Tips */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-semibold text-blue-800 mb-2">üí° KI-Tipps</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ Nutze mehrere Analysen f√ºr bessere Einsch√§tzungen</li>
          <li>‚Ä¢ KI-Empfehlungen sind Vorschl√§ge - finale Entscheidung liegt bei dir</li>
          <li>‚Ä¢ Regelm√§√üige Analysen helfen bei der Trend-Erkennung</li>
          <li>‚Ä¢ Kombiniere KI-Insights mit eigener Spielerfahrung</li>
        </ul>
      </div>
    </div>
  );
}